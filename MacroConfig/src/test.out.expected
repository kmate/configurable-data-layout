void f0(int x); void f1(int * x); void f2(int ** x); void f3(int *** x);
void f4(int ( x[2])); void f5(int ((* x) [4])); void f6(int ((*(* x) ) [8])); void f7(int (*( x[16]) )); void f8(int (*(*( x[32]) ) )); void f9(int (*((* x) [64]) )); void f10(int (*(*((* x) [2]) ) )); void f11(int (*((*(* x) ) [4]) )); void f12(int (*(*((*(* x) ) [8]) ) )); void f13(int (( x[16]) [32])); void f14(int (((* x) [2]) [4])); void f15(int ((*( x[8]) ) [16])); void f16(int (*(( x[32]) [2]) )); void f17(int (*((*( x[4]) ) [8]) )); void f18(int ((*((* x) [16]) ) [32])); void f19(int (*((*((* x) [2]) ) [4]) )); void f20(int (*(*((*(*((*(* x) ) [8]) ) ) [16]) ) ));
int g0 (void); int * g1 (void); int ** g2 (void); int *** g3 (void); int * g4 (void); int ** g5 (void); int *** g6 (void); int ** g7 (void); int *** g8 (void); int *** g9 (void); int **** g10 (void); int **** g11 (void); int ***** g12 (void); int ** g13 (void); int *** g14 (void); int *** g15 (void); int *** g16 (void); int **** g17 (void); int **** g18 (void); int ***** g19 (void); int ******** g20 (void);
void test()
{
    DECLARE_IMPL__SCALAR:; int a0; DECLARE_IMPL__PTR_SCALAR:; int * a1; DECLARE_IMPL__PTR_PTR_SCALAR:; int ** a2; DECLARE_IMPL__PTR_PTR_PTR_SCALAR:; int *** a3;
    DECLARE_ARRAY_IMPL__ARRAY_SCALAR:; int ( a4[2]); DECLARE_ARRAY_IMPL__PTR_ARRAY_SCALAR:; int ((* a5) [4]); DECLARE_ARRAY_IMPL__PTR_PTR_ARRAY_SCALAR:; int ((*(* a6) ) [8]); DECLARE_ARRAY_IMPL__ARRAY_PTR_SCALAR:; int (*( a7[16]) ); DECLARE_ARRAY_IMPL__ARRAY_PTR_PTR_SCALAR:; int (*(*( a8[32]) ) ); DECLARE_ARRAY_IMPL__PTR_ARRAY_PTR_SCALAR:; int (*((* a9) [64]) ); DECLARE_ARRAY_IMPL__PTR_ARRAY_PTR_PTR_SCALAR:; int (*(*((* a10) [2]) ) ); DECLARE_ARRAY_IMPL__PTR_PTR_ARRAY_PTR_SCALAR:; int (*((*(* a11) ) [4]) ); DECLARE_ARRAY_IMPL__PTR_PTR_ARRAY_PTR_PTR_SCALAR:; int (*(*((*(* a12) ) [8]) ) ); DECLARE_ARRAY_IMPL__ARRAY_ARRAY_SCALAR:; int (( a13[16]) [32]); DECLARE_ARRAY_IMPL__PTR_ARRAY_ARRAY_SCALAR:; int (((* a14) [2]) [4]); DECLARE_ARRAY_IMPL__ARRAY_PTR_ARRAY_SCALAR:; int ((*( a15[8]) ) [16]); DECLARE_ARRAY_IMPL__ARRAY_ARRAY_PTR_SCALAR:; int (*(( a16[32]) [2]) ); DECLARE_ARRAY_IMPL__ARRAY_PTR_ARRAY_PTR_SCALAR:; int (*((*( a17[4]) ) [8]) ); DECLARE_ARRAY_IMPL__PTR_ARRAY_PTR_ARRAY_SCALAR:; int ((*((* a18) [16]) ) [32]); DECLARE_ARRAY_IMPL__PTR_ARRAY_PTR_ARRAY_PTR_SCALAR:; int (*((*((* a19) [2]) ) [4]) ); DECLARE_ARRAY_IMPL__PTR_PTR_ARRAY_PTR_PTR_ARRAY_PTR_PTR_SCALAR:; int (*(*((*(*((*(* a20) ) [8]) ) ) [16]) ) );
    ALLOCATE_IMPL__SCALAR: do { } while(0); ALLOCATE_IMPL__PTR_SCALAR: do { a1 = malloc(sizeof(*(a1))); } while(0); ALLOCATE_IMPL__PTR_PTR_SCALAR: do { a2 = malloc(sizeof(*(a2))); *(a2) = malloc(sizeof(*(*(a2)))); } while(0); ALLOCATE_IMPL__PTR_PTR_PTR_SCALAR: do { a3 = malloc(sizeof(*(a3))); *(a3) = malloc(sizeof(*(*(a3)))); *(*(a3)) = malloc(sizeof(*(*(*(a3))))); } while(0); ALLOCATE_IMPL__ARRAY_SCALAR: do { } while(0); ALLOCATE_IMPL__PTR_ARRAY_SCALAR: do { a5 = malloc(sizeof(*(a5))); } while(0); ALLOCATE_IMPL__PTR_PTR_ARRAY_SCALAR: do { a6 = malloc(sizeof(*(a6))); *(a6) = malloc(sizeof(*(*(a6)))); } while(0); ALLOCATE_IMPL__ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a7) / sizeof((a7)[0]); ++i0) { (a7)[i0] = malloc(sizeof(*((a7)[i0]))); } } while(0); ALLOCATE_IMPL__ARRAY_PTR_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a8) / sizeof((a8)[0]); ++i0) { (a8)[i0] = malloc(sizeof(*((a8)[i0]))); *((a8)[i0]) = malloc(sizeof(*(*((a8)[i0])))); } } while(0); ALLOCATE_IMPL__PTR_ARRAY_PTR_SCALAR: do { a9 = malloc(sizeof(*(a9))); for(int i0 = 0; i0 < sizeof(*(a9)) / sizeof((*(a9))[0]); ++i0) { (*(a9))[i0] = malloc(sizeof(*((*(a9))[i0]))); } } while(0); ALLOCATE_IMPL__PTR_ARRAY_PTR_PTR_SCALAR: do { a10 = malloc(sizeof(*(a10))); for(int i0 = 0; i0 < sizeof(*(a10)) / sizeof((*(a10))[0]); ++i0) { (*(a10))[i0] = malloc(sizeof(*((*(a10))[i0]))); *((*(a10))[i0]) = malloc(sizeof(*(*((*(a10))[i0])))); } } while(0); ALLOCATE_IMPL__PTR_PTR_ARRAY_PTR_SCALAR: do { a11 = malloc(sizeof(*(a11))); *(a11) = malloc(sizeof(*(*(a11)))); for(int i0 = 0; i0 < sizeof(*(*(a11))) / sizeof((*(*(a11)))[0]); ++i0) { (*(*(a11)))[i0] = malloc(sizeof(*((*(*(a11)))[i0]))); } } while(0); ALLOCATE_IMPL__PTR_PTR_ARRAY_PTR_PTR_SCALAR: do { a12 = malloc(sizeof(*(a12))); *(a12) = malloc(sizeof(*(*(a12)))); for(int i0 = 0; i0 < sizeof(*(*(a12))) / sizeof((*(*(a12)))[0]); ++i0) { (*(*(a12)))[i0] = malloc(sizeof(*((*(*(a12)))[i0]))); *((*(*(a12)))[i0]) = malloc(sizeof(*(*((*(*(a12)))[i0])))); } } while(0); ALLOCATE_IMPL__ARRAY_ARRAY_SCALAR: do { } while(0); ALLOCATE_IMPL__PTR_ARRAY_ARRAY_SCALAR: do { a14 = malloc(sizeof(*(a14))); } while(0); ALLOCATE_IMPL__ARRAY_PTR_ARRAY_SCALAR: do { for(int i0 = 0; i0 < sizeof(a15) / sizeof((a15)[0]); ++i0) { (a15)[i0] = malloc(sizeof(*((a15)[i0]))); } } while(0); ALLOCATE_IMPL__ARRAY_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a16) / sizeof((a16)[0]); ++i0) { for(int i1 = 0; i1 < sizeof((a16)[i0]) / sizeof(((a16)[i0])[0]); ++i1) { ((a16)[i0])[i1] = malloc(sizeof(*(((a16)[i0])[i1]))); } } } while(0); ALLOCATE_IMPL__ARRAY_PTR_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a17) / sizeof((a17)[0]); ++i0) { (a17)[i0] = malloc(sizeof(*((a17)[i0]))); for(int i1 = 0; i1 < sizeof(*((a17)[i0])) / sizeof((*((a17)[i0]))[0]); ++i1) { (*((a17)[i0]))[i1] = malloc(sizeof(*((*((a17)[i0]))[i1]))); } } } while(0); ALLOCATE_IMPL__PTR_ARRAY_PTR_ARRAY_SCALAR: do { a18 = malloc(sizeof(*(a18))); for(int i0 = 0; i0 < sizeof(*(a18)) / sizeof((*(a18))[0]); ++i0) { (*(a18))[i0] = malloc(sizeof(*((*(a18))[i0]))); } } while(0); ALLOCATE_IMPL__PTR_ARRAY_PTR_ARRAY_PTR_SCALAR: do { a19 = malloc(sizeof(*(a19))); for(int i0 = 0; i0 < sizeof(*(a19)) / sizeof((*(a19))[0]); ++i0) { (*(a19))[i0] = malloc(sizeof(*((*(a19))[i0]))); for(int i1 = 0; i1 < sizeof(*((*(a19))[i0])) / sizeof((*((*(a19))[i0]))[0]); ++i1) { (*((*(a19))[i0]))[i1] = malloc(sizeof(*((*((*(a19))[i0]))[i1]))); } } } while(0); ALLOCATE_IMPL__PTR_PTR_ARRAY_PTR_PTR_ARRAY_PTR_PTR_SCALAR: do { a20 = malloc(sizeof(*(a20))); *(a20) = malloc(sizeof(*(*(a20)))); for(int i0 = 0; i0 < sizeof(*(*(a20))) / sizeof((*(*(a20)))[0]); ++i0) { (*(*(a20)))[i0] = malloc(sizeof(*((*(*(a20)))[i0]))); *((*(*(a20)))[i0]) = malloc(sizeof(*(*((*(*(a20)))[i0])))); for(int i1 = 0; i1 < sizeof(*(*((*(*(a20)))[i0]))) / sizeof((*(*((*(*(a20)))[i0])))[0]); ++i1) { (*(*((*(*(a20)))[i0])))[i1] = malloc(sizeof(*((*(*((*(*(a20)))[i0])))[i1]))); *((*(*((*(*(a20)))[i0])))[i1]) = malloc(sizeof(*(*((*(*((*(*(a20)))[i0])))[i1])))); } } } while(0);
    VALUE_OF_IMPL__SCALAR: (a0); VALUE_OF_IMPL__PTR_SCALAR: *(a1); VALUE_OF_IMPL__PTR_PTR_SCALAR: **(a2); VALUE_OF_IMPL__PTR_PTR_PTR_SCALAR: ***(a3); VALUE_OF_IMPL__ARRAY_SCALAR: (a4); VALUE_OF_IMPL__PTR_ARRAY_SCALAR: *(a5); VALUE_OF_IMPL__PTR_PTR_ARRAY_SCALAR: **(a6); VALUE_OF_IMPL__ARRAY_PTR_SCALAR: (a7); VALUE_OF_IMPL__ARRAY_PTR_PTR_SCALAR: (a8); VALUE_OF_IMPL__PTR_ARRAY_PTR_SCALAR: *(a9); VALUE_OF_IMPL__PTR_ARRAY_PTR_PTR_SCALAR: *(a10); VALUE_OF_IMPL__PTR_PTR_ARRAY_PTR_SCALAR: **(a11); VALUE_OF_IMPL__PTR_PTR_ARRAY_PTR_PTR_SCALAR: **(a12); VALUE_OF_IMPL__ARRAY_ARRAY_SCALAR: (a13); VALUE_OF_IMPL__PTR_ARRAY_ARRAY_SCALAR: *(a14); VALUE_OF_IMPL__ARRAY_PTR_ARRAY_SCALAR: (a15); VALUE_OF_IMPL__ARRAY_ARRAY_PTR_SCALAR: (a16); VALUE_OF_IMPL__ARRAY_PTR_ARRAY_PTR_SCALAR: (a17); VALUE_OF_IMPL__PTR_ARRAY_PTR_ARRAY_SCALAR: *(a18); VALUE_OF_IMPL__PTR_ARRAY_PTR_ARRAY_PTR_SCALAR: *(a19); VALUE_OF_IMPL__PTR_PTR_ARRAY_PTR_PTR_ARRAY_PTR_PTR_SCALAR: **(a20);
    VALUE_AT_IMPL__ARRAY_SCALAR: ((a4))[2]; VALUE_AT_IMPL__PTR_ARRAY_SCALAR: (*(a5))[4]; VALUE_AT_IMPL__PTR_PTR_ARRAY_SCALAR: (**(a6))[8]; VALUE_AT_IMPL__ARRAY_PTR_SCALAR: *((a7))[16]; VALUE_AT_IMPL__ARRAY_PTR_PTR_SCALAR: **((a8))[32]; VALUE_AT_IMPL__PTR_ARRAY_PTR_SCALAR: *(*(a9))[64]; VALUE_AT_IMPL__PTR_ARRAY_PTR_PTR_SCALAR: **(*(a10))[2]; VALUE_AT_IMPL__PTR_PTR_ARRAY_PTR_SCALAR: *(**(a11))[4]; VALUE_AT_IMPL__PTR_PTR_ARRAY_PTR_PTR_SCALAR: **(**(a12))[8]; VALUE_AT_IMPL__ARRAY_ARRAY_SCALAR: (((a13))[16])[32]; VALUE_AT_IMPL__PTR_ARRAY_ARRAY_SCALAR: ((*(a14))[2])[4]; VALUE_AT_IMPL__ARRAY_PTR_ARRAY_SCALAR: (*((a15))[8])[16]; VALUE_AT_IMPL__ARRAY_ARRAY_PTR_SCALAR: *(((a16))[32])[2]; VALUE_AT_IMPL__ARRAY_PTR_ARRAY_PTR_SCALAR: *(*((a17))[4])[8]; VALUE_AT_IMPL__PTR_ARRAY_PTR_ARRAY_SCALAR: (*(*(a18))[16])[32]; VALUE_AT_IMPL__PTR_ARRAY_PTR_ARRAY_PTR_SCALAR: *(*(*(a19))[2])[4]; VALUE_AT_IMPL__PTR_PTR_ARRAY_PTR_PTR_ARRAY_PTR_PTR_SCALAR: **(**(**(a20))[8])[16];
    DEALLOCATE_IMPL__SCALAR: do { } while(0); DEALLOCATE_IMPL__PTR_SCALAR: do { free(a1); } while(0); DEALLOCATE_IMPL__PTR_PTR_SCALAR: do { free(*(a2)); free(a2); } while(0); DEALLOCATE_IMPL__PTR_PTR_PTR_SCALAR: do { free(*(*(a3))); free(*(a3)); free(a3); } while(0); DEALLOCATE_IMPL__ARRAY_SCALAR: do { } while(0); DEALLOCATE_IMPL__PTR_ARRAY_SCALAR: do { free(a5); } while(0); DEALLOCATE_IMPL__PTR_PTR_ARRAY_SCALAR: do { free(*(a6)); free(a6); } while(0); DEALLOCATE_IMPL__ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a7) / sizeof((a7)[0]); ++i0) { free((a7)[i0]); } } while(0); DEALLOCATE_IMPL__ARRAY_PTR_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a8) / sizeof((a8)[0]); ++i0) { free(*((a8)[i0])); free((a8)[i0]); } } while(0); DEALLOCATE_IMPL__PTR_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(a9)) / sizeof((*(a9))[0]); ++i0) { free((*(a9))[i0]); } free(a9); } while(0); DEALLOCATE_IMPL__PTR_ARRAY_PTR_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(a10)) / sizeof((*(a10))[0]); ++i0) { free(*((*(a10))[i0])); free((*(a10))[i0]); } free(a10); } while(0); DEALLOCATE_IMPL__PTR_PTR_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(*(a11))) / sizeof((*(*(a11)))[0]); ++i0) { free((*(*(a11)))[i0]); } free(*(a11)); free(a11); } while(0); DEALLOCATE_IMPL__PTR_PTR_ARRAY_PTR_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(*(a12))) / sizeof((*(*(a12)))[0]); ++i0) { free(*((*(*(a12)))[i0])); free((*(*(a12)))[i0]); } free(*(a12)); free(a12); } while(0); DEALLOCATE_IMPL__ARRAY_ARRAY_SCALAR: do { } while(0); DEALLOCATE_IMPL__PTR_ARRAY_ARRAY_SCALAR: do { free(a14); } while(0); DEALLOCATE_IMPL__ARRAY_PTR_ARRAY_SCALAR: do { for(int i0 = 0; i0 < sizeof(a15) / sizeof((a15)[0]); ++i0) { free((a15)[i0]); } } while(0); DEALLOCATE_IMPL__ARRAY_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a16) / sizeof((a16)[0]); ++i0) { for(int i1 = 0; i1 < sizeof((a16)[i0]) / sizeof(((a16)[i0])[0]); ++i1) { free(((a16)[i0])[i1]); } } } while(0); DEALLOCATE_IMPL__ARRAY_PTR_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(a17) / sizeof((a17)[0]); ++i0) { for(int i1 = 0; i1 < sizeof(*((a17)[i0])) / sizeof((*((a17)[i0]))[0]); ++i1) { free((*((a17)[i0]))[i1]); } free((a17)[i0]); } } while(0); DEALLOCATE_IMPL__PTR_ARRAY_PTR_ARRAY_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(a18)) / sizeof((*(a18))[0]); ++i0) { free((*(a18))[i0]); } free(a18); } while(0); DEALLOCATE_IMPL__PTR_ARRAY_PTR_ARRAY_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(a19)) / sizeof((*(a19))[0]); ++i0) { for(int i1 = 0; i1 < sizeof(*((*(a19))[i0])) / sizeof((*((*(a19))[i0]))[0]); ++i1) { free((*((*(a19))[i0]))[i1]); } free((*(a19))[i0]); } free(a19); } while(0); DEALLOCATE_IMPL__PTR_PTR_ARRAY_PTR_PTR_ARRAY_PTR_PTR_SCALAR: do { for(int i0 = 0; i0 < sizeof(*(*(a20))) / sizeof((*(*(a20)))[0]); ++i0) { for(int i1 = 0; i1 < sizeof(*(*((*(*(a20)))[i0]))) / sizeof((*(*((*(*(a20)))[i0])))[0]); ++i1) { free(*((*(*((*(*(a20)))[i0])))[i1])); free((*(*((*(*(a20)))[i0])))[i1]); } free(*((*(*(a20)))[i0])); free((*(*(a20)))[i0]); } free(*(a20)); free(a20); } while(0);
}
